name: build & test
on:
    workflow_run:
        workflows: ["Generate Build-Matrix"]
        types: [completed]
        branches: [main, development]

jobs:
    download-build-matrix:
        runs-on: ubuntu-latest
        steps:
            - name: Download env.config artifact
              uses: actions/download-artifact@v4
              with:
                name: env-config

            - name: Load env.config
              id: load-config
              run: |
                echo "CONFIG_CONTENT=$(cat env.config)" >> $GITHUB_ENV

    build:
        needs: download-build-matrix
        name: |
            ${{ matrix.config.prefix }} 
            ${{ matrix.config.compiler_name }}-${{ matrix.config.compiler_version }} 
            ${{ matrix.config.suffix }} 
            (C++${{ matrix.cxx_standard }}, ${{ matrix.build_mode }}, ${{ matrix.format_backend }})
        runs-on: ${{ matrix.config.os }}
        container: ${{ matrix.config.container }}

        strategy:
            fail-fast: false
            matrix:
                build_mode: [Debug, Release]
                cxx_standard: [20, 23]
                format_backend: [std, fmt]
                config: ${{ fromYaml(env.CONFIG_CONTENT) }}

        steps:
            - uses: actions/checkout@v4
  
            - name: Setup macOS
              if: startsWith(matrix.config.os, 'macOS')
              shell: bash
              run: |
                LLVM_NAME=llvm@${{ matrix.config.compiler_version }}
                env brew install ninja $LLVM_NAME
                LLVM_PATH="$(brew --prefix $LLVM_NAME)"
                echo "CC=$(echo $LLVM_PATH/bin/clang)" >> $GITHUB_ENV
                echo "CXX=$(echo $LLVM_PATH/bin/clang++)" >> $GITHUB_ENV
                echo "LDFLAGS=$(echo $LDFLAGS ${{ matrix.config.ldflags_workaround }})" >> $GITHUB_ENV

                echo "CMAKE_CONFIG_EXTRA=$(echo $CMAKE_CONFIG_EXTRA -DCMAKE_BUILD_TYPE=${{ matrix.build_mode }})" >> $GITHUB_ENV

            - name: Clang libc++ setup
              if: ${{ matrix.config.compiler_name  == 'clang' && matrix.config.libcxx  == true }}
              shell: bash
              run: |
                echo "CXXFLAGS=$(echo $CXXFLAGS -stdlib=libc++)" >> $GITHUB_ENV
                echo "LDFLAGS=$(echo $LDFLAGS -lc++abi)" >> $GITHUB_ENV

            - name: Setup linux
              if: ${{ matrix.config.prefix  == 'Linux' }}
              shell: bash
              run: |
                echo "CMAKE_CONFIG_EXTRA=$(echo $CMAKE_CONFIG_EXTRA -DCMAKE_BUILD_TYPE=${{ matrix.build_mode }})" >> $GITHUB_ENV

            - name: Setup msvc
              if: ${{ matrix.config.compiler_name  == 'msvc' }}
              shell: bash
              run: |
                echo "CMAKE_CONFIG_EXTRA=$(echo $CMAKE_CONFIG_EXTRA -G\"${{ matrix.config.cmake_generator }}\" -T\"${{ matrix.config.compiler_version }}\" -Ax64)" >> $GITHUB_ENV
                echo "CMAKE_BUILD_EXTRA=$(echo $CMAKE_BUILD_EXTRA --config ${{ matrix.build_mode }})" >> $GITHUB_ENV

            - name: Enable Address and Undefined Sanitizer
              if: ${{ matrix.config.asan == true }}
              shell: bash
              run: |
                echo "CMAKE_CONFIG_EXTRA=$(echo $CMAKE_CONFIG_EXTRA -DSANITIZE_ADDRESS=YES -DSANITIZE_UNDEFINED=YES)" >> $GITHUB_ENV

            - name: Set fmt as formatting backend
              if: startsWith(matrix.format_backend, 'fmt')
              shell: bash
              run: |
                echo "CMAKE_CONFIG_EXTRA=$(echo $CMAKE_CONFIG_EXTRA -DMIMICPP_CONFIG_USE_FMT=YES)" >> $GITHUB_ENV

            # ASan has some serious trouble with libc++ exception mechanism
            # see: https://github.com/llvm/llvm-project/issues/59432
            - name: Disable alloc_dealloc_mismatch detection with libc++
              if: ${{ matrix.config.asan == true && matrix.config.libcxx == true}}
              shell: bash
              run: |
                echo "ASAN_OPTIONS=$(echo $ASAN_OPTIONS:alloc_dealloc_mismatch=0)" >> $GITHUB_ENV

            - name: Configure
              shell: bash
              run: |
                cmake \
                    -S . \
                    -B build \
                    -D CMAKE_VERBOSE_MAKEFILE=yes \
                    -D MIMICPP_FORCED_CXX_STANDARD="${{ matrix.cxx_standard }}" \
                    -D MIMICPP_ENABLE_ADAPTER_TESTS=YES \
                    -D MIMICPP_CONFIG_EXPERIMENTAL_CATCH2_MATCHER_INTEGRATION=YES \
                    ${{ env.CMAKE_CONFIG_EXTRA }}

            - name: Build
              shell: bash
              run: |
                cmake --build build \
                    -j4 \
                    ${{ env.CMAKE_BUILD_EXTRA }}

            - name: Run tests
              shell: bash
              env:
                CTEST_OUTPUT_ON_FAILURE: 1
              run: ctest --test-dir build/test/unit-tests -C ${{ matrix.build_mode }} -j4

            - name: Run adapter tests
              shell: bash
              env:
                CTEST_OUTPUT_ON_FAILURE: 1
              run: ctest --test-dir build/test/adapter-tests -C ${{ matrix.build_mode }} -j4

            - name: Run examples
              shell: bash
              env:
                CTEST_OUTPUT_ON_FAILURE: 1
              run: ctest --test-dir build/examples -C ${{ matrix.build_mode }} -j4
